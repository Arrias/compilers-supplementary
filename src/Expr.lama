-- Expression evaluator

import List;
import State;
import World;
import Lexer;
import Parser;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+", infix +],
  ["-", infix -],
  ["*", infix *],
  ["/", infix /],
  ["%", infix %],
  ["==", infix ==],
  ["!=", infix !=],
  ["<", infix <],
  ["<=", infix <=],
  [">", infix >],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp(op, l, r) {
  case assoc(ops, op) of
    Some (f) -> f(l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (string, expr)       |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Call    (string, expr list)  |
--        Ignore  (expr)

fun spaces(fl, n) {
  for var i; i := 0, i < n, i := i + 1 do
    fprintf(fl, " ")
  od
}

fun debugExpr(expr, fl) {
  var shift = 4;

  fun printList(lst) {
    foldl(fun (a, l) {
      fprintf(fl, "%s ", l);
      a + 1
    }, 0, lst);
    fprintf(fl, "\n")
  }

  fun debug(expr, i) {
    spaces(fl, i * shift);
    case expr of
        Assn (e1, e2)     -> (
          fprintf(fl, "Assn\n");
          debug(e1, i + 1);
          debug(e2, i + 1)
        )
      | Seq (e1, e2)      -> (
        fprintf(fl, "Seq\n");
        debug(e1, i + 1);
        debug(e2, i + 1)
      )
      | Skip              -> (
        fprintf(fl, "Skip\n")
      )
      | Read(s)           -> (
        fprintf(fl, "Read(%s)\n", s)
      )
      | Write(e)          -> (
        fprintf(fl, "Write\n");
        debug(e, i + 1)
      )
      | If(e1, e2, e3)    -> (
        fprintf(fl, "If\n");
        debug(e1, i + 1);
        debug(e2, i + 1);
        debug(e3, i + 1)
      )
      | While (e1, e2)    -> (
        fprintf(fl, "While\n");
        debug(e1, i + 1);
        debug(e2, i + 1)
      )
      | DoWhile(e1, e2)   -> (
        fprintf(fl, "DoWhile\n");
        debug(e1, i + 1);
        debug(e2, i + 1)
      )
      | Var(s)            -> (
        fprintf(fl, "Var(%s)\n", s)
      )
      | Ref(x)            -> (
        fprintf(fl, "Ref(%s)\n", x)
      )
      | Const(a)          -> (
        fprintf(fl, "Const(%d)\n", a)
      )
      | Binop(op, e1, e2) -> (
        fprintf(fl, "Binop(%s)\n", op);
        debug(e1, i + 1);
        debug(e2, i + 1)
      )
      | Call(f, l)        -> (
        fprintf(fl, "Call(%s)\n", f);
        foldl(fun (a, e) {
          debug(e, i + 1)
        }, 0, l)
      )
      | Ignore(e)         -> (
        fprintf(fl, "Ignore\n");
        debug(e, i + 1)
      )
      | Scope(defs, e)    -> (
        foldl(fun (a, d) {
          case d of
              Fun(name, args, body) ->
                fprintf(fl, "fun %s\n", name);
                printList(args);
                debug(body, i + 1)
            | Var(smth)             -> (
              printList(smth)
            )
          esac;
          a + 1
        }, 0, defs);
        fprintf(fl, "Scope\n");
        debug(e, i + 1)
      )
    esac
  }

  debug(expr, 0)
}

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun checkVar(state, name) {
  case state.lookup(name) of
      Var (_) -> skip
    | _       -> error(sprintf("the name ""%s"" does not designate a variable", name), getLoc(name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun checkFun(state, name) {
  case state.lookup(name) of
      Fun (_, _) -> skip
    | _          -> error(sprintf("the name ""%s"" does not designate a function", name), getLoc(name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames(state, names) {
  foldl(fun (s, name) { s.addName(name, Var(0)) }, state, names)
}

-- Helper function: adds a function in current scope
fun addFunction(state, name, args, body) {
  state.addName(name, Fun(args, body))
}

-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList(c, exprs) {
  case foldl(fun ([c, vals], e) {
    case eval(c, e) of
      [c, v] -> [c, v:vals]
    esac
  },
    [c, { }],
    exprs) of
    [c, vals] -> [c, reverse(vals)]
  esac
}

-- var fl = fopen("debug.txt", "w");

(* Assignment *)
fun eval(c@[s, w], expr) {
  case expr of
      Skip              -> [c, Bot]
    | Assn (l, r)       ->
      case evalList(c, { l, r }) of
        [c@[s, w], { Ref(x), v }] -> [[s <- [x, v], w], v]
      esac
    | Seq(l, r)         ->
      case eval(c, l) of
        [c1, _] -> eval(c1, r)
      esac
    | Read(x)           -> (
      case readWorld(w) of
        w1 -> [[s <- [x, w1.fst], w1.snd], Bot]
      esac
    )
    | Write(x)          -> (
      case eval(c, x) of
        [c@[s, w], out] ->
          case writeWorld(out, w) of
            w -> [[s, w], Bot]
          esac
      esac
    )
    | Var(x)            -> [c, lookup(s, x)]
    | Const(n)          -> [c, n]
    | If(e, s1, s2)     ->
      case eval(c, e) of
        [c, vl] -> (
          if vl == 1 then
            eval(c, s1)
            else
              eval(c, s2)
          fi
        )
      esac
    | While(e, act)     ->
      case eval(c, e) of
        [c, vl] -> (
          if vl == 1 then
            case eval(c, act) of
              [c, _] -> eval(c, expr)
            esac
            else
              [c, Bot]
          fi
        )
      esac
    | DoWhile(e, act)   ->
      case eval(c, act) of
        [c, _] ->
          case eval(c, e) of
            [c, vl] -> (
              if vl == 1 then
                eval(c, expr)
                else
                  [c, Bot]
              fi
            )
          esac
      esac
    | Ref(x)            -> [c, Ref(x)]
    | Ignore(e)         ->
      case eval(c, e) of
        [c, _] -> [c, Bot]
      esac
    | Binop(op, e1, e2) ->
      case evalList(c, { e1, e2 }) of
        [c, { v1, v2 }] -> [c, evalOp(op, v1, v2)]
      esac
    | Scope(defs, e)    -> (
      s := enterScope(s);
      s := foldl(fun (s, d) {
        case d of
            Var(smth)             -> addNames(s, smth)
          | Fun(name, args, body) -> addFunction(s, name, args, body)
        esac
      }, s, defs);
      case eval([s, w], e) of
        [[s, w], l] -> (
          [[leaveScope(s), w], l]
        )
      esac
    )
    | Call(f, args)     -> (
      checkFun(s, f);
      case evalList(c, args) of
        [[s, w], args] -> (
          case lookup(s, f) of
            Fun(argNames, body) -> (
              var ctx = enterFunction(s);

              ctx := foldl(fun (ctx, e) {
                case e of
                  [name, v] -> addName(ctx, name, v)
                esac
              }, ctx, zip(argNames, args));

              case eval([ctx, w], body) of
                [[s_func, w], l] -> [[leaveFunction(s, getGlobal(s_func)), w], l]
              esac
            )
          esac
        )
      esac
    )
  esac
}
(* End *)

-- Evaluates a program with a given input and returns an output
public fun evalExpr(input, expr) {
  case eval([emptyState(), createWorld(input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}