-- Expression evaluator

import List;
import State;
import World;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+", infix +],
  ["-", infix -],
  ["*", infix *],
  ["/", infix /],
  ["%", infix %],
  ["==", infix ==],
  ["!=", infix !=],
  ["<", infix <],
  ["<=", infix <=],
  [">", infix >],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp(op, l, r) {
  case assoc(ops, op) of
    Some (f) -> f(l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (expr, expr)         |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Ignore  (expr)

-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList(c, exprs) {
  case foldl(fun ([c, vals], e) {
    case eval(c, e) of
      [c, v] -> [c, v:vals]
    esac
  },
    [c, { }],
    exprs) of
    [c, vals] -> [c, reverse(vals)]
  esac
}

-- values can be
-- Num | Ref (x) | Bot

fun eval(c@[s, w], expr) {
  case expr of
      Skip              -> [c, Bot]
    | Assn (l, r)       ->
      case evalList(c, { l, r }) of
        [c@[s, w], { Ref(x), v }] -> [[s <- [x, v], w], v]
      esac
    | Seq(l, r)         ->
      case eval(c, l) of
        [c1, _] -> eval(c1, r)
      esac
    | Read(x)           -> (
      case readWorld(w) of
        w1 -> [[s <- [x, w1.fst], w1.snd], Bot]
      esac
    )
    | Write(x)          -> (
      case eval(c, x) of
        [c@[s, w], out] ->
          case writeWorld(out, w) of
            w -> [[s, w], Bot]
          esac
      esac
    )
    | Var(x)            -> [c, s(x)]
    | Const(n)          -> [c, n]
    | If(e, s1, s2)     ->
      case eval(c, e) of
        [c, vl] -> (
          if vl == 1 then
            eval(c, s1)
            else
              eval(c, s2)
          fi
        )
      esac
    | While(e, act)     ->
      case eval(c, e) of
        [c, vl] -> (
          if vl == 1 then
            case eval(c, act) of
              [c, _] -> eval(c, expr)
            esac
            else
              [c, Bot]
          fi
        )
      esac
    | DoWhile(e, act)   ->
      case eval(c, act) of
        [c, _] ->
          case eval(c, e) of
            [c, vl] -> (
              if vl == 1 then
                eval(c, expr)
                else
                  [c, Bot]
              fi
            )
          esac
      esac
    | Ref(x)            -> [c, Ref(x)]
    | Ignore(e)         ->
      case eval(c, e) of
        [c, _] -> [c, Bot]
      esac
    | Binop(op, e1, e2) ->
      case evalList(c, { e1, e2 }) of
        [c, { v1, v2 }] -> [c, evalOp(op, v1, v2)]
      esac
  esac
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr(input, expr) {
  case eval([emptyState, createWorld(input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
