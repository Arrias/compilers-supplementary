-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn(i) {
  case i of
      READ         -> "READ"
    | WRITE        -> "WRITE"
    | BINOP (s)    -> sprintf("BINOP %s", s)
    | LD    (x)    -> sprintf("LD %s", x)
    | LDA   (x)    -> sprintf("LDA %s", x)
    | ST    (x)    -> sprintf("ST %s", x)
    | STI          -> "STI"
    | CONST (n)    -> sprintf("CONST %d", n)
    | LABEL (s)    -> sprintf("LABEL %s", s)
    | JMP   (l)    -> sprintf("JMP %s", l)
    | CJMP  (c, l) -> sprintf("CJMP %s, %s", c, l)
    | DUP          -> "DUP"
    | DROP         -> "DROP"
  esac
}

public fun showSM(prg) {
  map(fun (i) { showSMInsn(i) ++ "\n" }, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv(insns) {
  var map =
    fix(fun (rec) {
      fun ([m, insns]) {
        case insns of
            { }              -> m
          | LABEL (lab) : tl -> rec([addMap(m, lab, insns), tl])
          | _ : tl           -> rec([m, tl])
        esac
      }
    }) $ [emptyMap(compare), insns];

  [fun (l) {
    case findMap(map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel(env, lab) {
  if isFirst && lab == "L15" then
    failure("HOHOHO")
  fi;
  env [0](lab)
}

var isFirst = true;
var progr;
var cnt = 0;

fun pop(st@(x : xs)) {
  [x, xs]
}

fun expected(jtype) {
  case jtype of
      "nz" -> 1
    | "z"  -> 0
  esac
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration
fun eval(env, c@[stack, state, world], insns) {
  case insns of
      { }        -> c
    | (i : rest) ->
      case i of
          READ       -> (
            var rw = readWorld(world);
            eval(env, [rw.fst:stack, state, rw.snd], rest)
          )
        | WRITE      -> (
          var ps = pop(stack);
          eval(env, [ps.snd, state, writeWorld(ps.fst, world)], rest)
        )
        | BINOP (op) -> (
          case stack of
            x:y:tail -> eval(env, [evalOp(op, y, x):tail, state, world], rest)
          esac
        )
        | LD (x)     -> (
          eval(env, [state(x):stack, state, world], rest)
        )
        | ST (x)     -> (
          var ps = pop(stack);
          eval(env, [ps.snd, state <- [x, ps.fst], world], rest)
        )
        | CONST (n)  -> (
          eval(env, [n:stack, state, world], rest)
        )
        | JMP (l)    -> (
          eval(env, c, env.fromLabel(l))
        )
        | CJMP(v, l) -> (
          case pop(stack) of
            [head, tail] -> (
              var e = expected(v);
              if head == e
                then
                  eval(env, [tail, state, world], env.fromLabel(l))
                elif head == 1 - e then
                  eval(env, [tail, state, world], rest)
                else
                  failure("CJMP expect 1 or 0 at top of the stack")
              fi
            )
          esac
        )
        | LABEL(l)   -> (
          eval(env, c, rest)
        )
        | STI        ->
            case pop(stack) of
              [value, stack] ->
                case pop(stack) of
                  [Ref(name), stack] -> (
                    eval(env, [value:stack, state <- [name, value], world], rest)
                  )
                esac
            esac
        | DROP       ->
            case pop(stack) of
              [_, stack] ->
                eval(env, [stack, state, world], rest)
            esac
        | LDA (name) ->
            eval(env, [Ref(name):stack, state, world], rest)
      esac
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM(input, insns) {
  eval(initEvalEnv(insns), [{ }, emptyState, createWorld(input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv(n) {
  [fun () {
    [sprintf("L%d", n), makeCompEnv(n + 1)]
  }]
}

fun initCompEnv() {
  makeCompEnv(0)
}

-- Accessor function: generates one label
fun genLabel(env) {
  env [0]()
}

-- Utility function: generates n labels
fun genLabels(env, n) {
  fun inner(env, n) {
    if n == 0
      then { env }
      else case env.genLabel of
        [lab, env] -> lab:inner(env, n - 1)
      esac
    fi
  }

  listArray(inner(env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
public fun compileSM(stmt) {
  fun label(lab, labUsed) {
    if labUsed
      then singletonBuffer(LABEL(lab))
      else emptyBuffer()
    fi
  }

  fun compile(lab, env, stmt) {
    case stmt of
        Skip              -> [false, env, emptyBuffer()]
      | Read  (x)         -> [false, env, singletonBuffer(READ) <+ ST(x)]
      | Write (e)         ->
        case env.genLabel of
          [l, env] ->
            case compile(l, env, e) of
              [lUsed, env, code] ->
                [false, env, code <+ WRITE]
            esac
        esac
      | Assn  (x, e)      ->
        case env.genLabels(2) of
          [lx, le, env] ->
            case compile(lx, env, x) of
              [lxUsed, env, xCode] ->
                case compile(le, env, e) of
                  [leUsed, env, eCode] -> [false, env,
                    xCode <+>
                      label(lx, lxUsed) <+>
                      eCode <+>
                      label(le, leUsed) <+>
                      singletonBuffer(STI)
                  ]
                esac
            esac
        esac
      | Seq   (s1, s2)    ->
        case env.genLabel of
          [s2Lab, env] ->
            case compile(s2Lab, env, s1) of
              [s2LabUsed, env, s1Code] ->
                case compile(lab, env, s2) of
                  [labUsed, env, s2Code] -> [labUsed, env, s1Code <+> label(s2Lab, s2LabUsed) <+> s2Code]
                esac
            esac
        esac
      | While(e, s)       -> (
        isFirst := false;
        case env.genLabels(3) of
          [l1, l2, l3, env1] ->
            case compile(l2, env1, s) of
              [_, env2, sCode] ->
                case compile(l3, env2, e) of
                  [l3Used, env3, eCode] -> [false, env3,
                    singletonBuffer(JMP(l2)) <+>
                      singletonBuffer(LABEL(l1)) <+>
                      sCode <+>
                      singletonBuffer(LABEL(l2)) <+>
                      eCode <+>
                      label(l3, l3Used) <+>
                      singletonBuffer(CJMP("nz", l1))
                  ]
                esac
            esac
        esac
      )
      | DoWhile(e, s)     -> (
        case env.genLabels(3) of
          [l1, l2, l3, env] -> case compile(l2, env, s) of
            [l2Used, env, sCode] ->
              case compile(l3, env, e) of
                [l3Used, env, eCode] -> [false, env,
                  singletonBuffer(LABEL(l1)) <+>
                    sCode <+>
                    label(l2, l2Used) <+>
                    eCode <+>
                    label(l3, l3Used) <+>
                    singletonBuffer(CJMP("nz", l1))
                ]
              esac
          esac
        esac
      )
      | If(e, s1, s2)     -> (
        case env.genLabels(2) of
          [l1, l2, env] ->
            case compile(lab, env, s2) of
              [flag2, env, s2Code] ->
                case compile(lab, env, s1) of
                  [flag1, env, s1Code] ->
                    case compile(l2, env, e) of
                      [l2Used, env, eCode] -> [true, env,
                        eCode <+>
                          label(l2, l2Used) <+>
                          singletonBuffer(CJMP("nz", l1)) <+>
                          s2Code <+>
                          singletonBuffer(JMP(lab)) <+>
                          singletonBuffer(LABEL(l1)) <+>
                          s1Code
                      ]
                    esac
                esac
            esac
        esac
      )
      | Ignore(e)         ->
        case env.genLabel of
          [l, env] ->
            case compile(l, env, e) of
              [lUsed, env, eCode] -> [false, env,
                eCode <+>
                  label(l, lUsed) <+>
                  singletonBuffer(DROP)
              ]
            esac
        esac
      | Var(x)            -> [false, env, singletonBuffer(LD(x))]
      | Ref    (x)        -> [false, env, singletonBuffer(LDA(x))]
      | Const  (n)        -> [false, env, singletonBuffer(CONST(n))]
      | Binop(op, e1, e2) ->
        case env.genLabels(2) of
          [l1, l2, env] ->
            case compile(l1, env, e1) of
              [l1Used, env, e1Code] ->
                case compile(l2, env, e2) of
                  [l2Used, env, e2Code] -> [false, env,
                    e1Code <+>
                      label(l1, l1Used) <+>
                      e2Code <+>
                      label(l2, l2Used) <+>
                      singletonBuffer(BINOP(op))]
                esac
            esac
        esac
      | _                 -> failure("compileSM not implemented\n")
    esac
  }

  case initCompEnv().genLabel of
    [endLab, env] ->
      case compile(endLab, env, stmt) of
        [endLabUsed, _, code] -> getBuffer $ code <+> label(endLab, endLabUsed)
      esac
  esac
}
