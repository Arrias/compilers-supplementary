-- Stack machine.

import Ref;
import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Parser;
import Lexer;
import Expr;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn(i) {
-- Shows a location (a reference to function argument, local or global variable)
  fun showLoc(d) {
    case d of
        Arg (i) -> sprintf("arg[%d]", i)
      | Loc (i) -> sprintf("loc[%d]", i)
      | Glb (x) -> x
    esac
  }

  case i of
      READ             -> "READ"
    | WRITE            -> "WRITE"
    | BINOP  (s)       -> sprintf("BINOP %s", s)
    | LD     (x)       -> sprintf("LD %s", showLoc(x))
    | LDA    (x)       -> sprintf("LDA %s", showLoc(x))
    | ST     (x)       -> sprintf("ST %s", showLoc(x))
    | STI              -> "STI"
    | CONST  (n)       -> sprintf("CONST %d", n)
    | LABEL  (s)       -> sprintf("LABEL %s", s)
    | JMP    (l)       -> sprintf("JMP %s", l)
    | CJMP   (c, l)    -> sprintf("CJMP %s, %s", c, l)
    | CALL   (f, n)    -> sprintf("CALL %s, %d", f, n)
    | BEGIN  (f, a, l) -> sprintf("BEGIN %s, %d, %d", f, a, l)
    | GLOBAL (x)       -> sprintf("GLOBAL %s", x)
    | END              -> sprintf("END")
    | DUP              -> "DUP"
    | DROP             -> "DROP"
  esac
}

public fun showSM(prg) {
  map(fun (i) { showSMInsn(i) ++ "\n" }, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv(insns) {
  var map =
    fix(fun (rec) {
      fun ([m, insns]) {
        case insns of
            { }              -> m
          | LABEL (lab) : tl -> rec([addMap(m, lab, insns), tl])
          | _ : tl           -> rec([m, tl])
        esac
      }
    }) $ [emptyMap(compare), insns];

  [fun (l) {
    case findMap(map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel(env, lab) {
  env [0](lab)
}

-- var isFirst = 1;
-- var fl = fopen("debug.txt", "w");
-- var doDebug = false;

-- fun debug(msg) {
--   if doDebug == true then
--     fprintf(fl, msg)
--   fi
-- }

fun debugStack(st) {
  case st of
      { }           -> skip
    | Ref(_) : tail -> debugStack(tail)
    | x : tail      -> (
      --debug(sprintf("%d", x));
      debugStack(tail)
    )
  esac
}

-- Stack machine interpreter. Takes an environment, a world and a program,
-- returns a final output
fun eval(env, w, insns) {
-- Global state maps names of global variables to values
  var globalState = ref(fun (x) { error(sprintf("name ""%s"" is undefined", x), getLoc(x)) });


  -- Make a fresh local state: a pair of arrays for arguments and local variables;
  -- takes the numbers of arguments and local variables respectively
  fun makeState(a, l) {
    [initArray(a, fun (_) { 0 }), initArray(l, fun (_) { 0 })]
  }

  -- Lookups a location in local/global states
  fun lookup(s, loc) {
    case s of
      [args, locs] -> (
        case loc of
            Arg (i) -> args[i]
          | Loc (i) -> locs[i]
          | Glb (x) -> deref(globalState)(x)
        esac
      )
    esac
  }

  -- Assigns a value to a location
  fun assign([args, locs], loc, v) {
    case loc of
        Arg (i) -> args[i] := v
      | Loc (i) -> locs[i] := v
      | Glb (x) -> var g = deref(globalState);
      globalState ::= fun (y) { if compare(x, y) == 0 then v else g(y) fi }
    esac
  }

  -- Takes n positions from the list, retursn a pair: the remaining list and the taken
  -- sublist
  fun take(list, n) {
    fun inner(n, acc, list) {
      if n == 0
        then [list, acc]
        else inner(n - 1, list.hd:acc, list.tl)
      fi
    }

    inner(n, { }, list)
  }

  fun pop(st@(x : xs)) {
    [x, xs]
  }

  fun expected(jtype) {
    case jtype of
        "nz" -> 1
      | "z"  -> 0
    esac
  }

  -- Core interpreter: takes a configuration and a program, returns a configuration
  (* Assignment *)
  fun eval(c@[st, cst, state, w], insns) {
--     if isFirst == 1 then
--       --debug("\nEvalBegin:\n");
--       isFirst := 0
--     fi;

    case insns of
        { }      -> c
      | i : rest ->
        --debug("======\n");
        --debug(sprintf("stack size :%d\n", size(st)));
        --debugStack(st);
        --debug("\n");
        --debug(sprintf("%s\n", showSMInsn(i)));

        case i of
            READ               -> (
              var rw = readWorld(w);
              eval([rw.fst:st, cst, state, rw.snd], rest)
            )
          | WRITE              -> (
            var ps = pop(st);
            eval([ps.snd, cst, state, writeWorld(ps.fst, w)], rest)
          )
          | BINOP(op)          -> (
            case st of
              x : y : tail ->
                --debug(sprintf("op args: %d %d\n", x, y));
                eval([evalOp(op, y, x):tail, cst, state, w], rest)
            esac
          )
          | LD(x)              -> (
            var v = lookup(state, x);
            --debug(sprintf("to stack: %d\n", v));
            eval([v:st, cst, state, w], rest)
          )
          | ST(x)              -> (
            var ps = pop(st);
            assign(state, x, ps.fst);
            eval([ps.snd, cst, state, w], rest)
          )
          | CONST(n)           -> (
            eval([n:st, cst, state, w], rest)
          )
          | JMP(l)             -> (
            eval(c, fromLabel(env, l))
          )
          | CJMP(v, l)         -> (
            case pop(st) of
              [head, tail] -> (
                var e = expected(v);
                if head == e
                  then
                    eval([tail, cst, state, w], env.fromLabel(l))
                  else
                    eval([tail, cst, state, w], rest)
                fi
              )
            esac
          )
          | LABEL(l)           -> eval(c, rest)
          | STI                -> (
            case st of
              value : Ref(pos) : tail -> (
                assign(state, pos, value);
                eval([value:tail, cst, state, w], rest)
              )
            esac
          )
          | DROP               -> (
            case st of
              v : tail -> eval([tail, cst, state, w], rest)
            esac
          )
          | LDA(x)             -> eval([Ref(x):st, cst, state, w], rest)
          | GLOBAL(x)          -> (
            assign(state, Glb(x), 0);
            eval([st, cst, state, w], rest)
          )
          | BEGIN(label, a, l) ->
              case take(st, a) of
                [tail, args] ->
                  case makeState(a, l) of
                    nState ->
                      --debug(sprintf("begining func("));
                      foldl(fun (i, arg) {
                        assign(nState, Arg(i), arg);
--                         if i > 0 then
--                           --debug(", ")
--                         fi;
                        --debug(sprintf("%d", arg));
                        i + 1
                      }, 0, args);
                      --debug(")\n");
                      --                       for var i; i := 0, i < size(args), i := i + 1 do
                      --                         assign(nState, Arg(i), args[i]);
                      --                         fprintf(fl, "arg[%d]=%d\n", i, args[i])
                      --                       od;
                      eval([tail, cst, nState, w], rest)
                  esac
              esac
          | END                ->
              case cst of
                  { }                -> c
                | [old, prog] : rcst -> eval([st, rcst, old, w], prog)
              esac
          | CALL(lab, args)    ->
              eval([st, [state, rest]:cst, state, w], fromLabel(env, lab))
          | _                  -> failure("SM interpreter is not implemented\n")
        esac
    esac
  }
  (* End *)
  --debug(showSM(insns));

  eval([{ }, { }, makeState(0, 0), w], insns) [3].getOutput
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM(input, insns) {
  eval(initEvalEnv(insns), createWorld(input), insns)
}

-- Compilation environment: generates labels
fun makeCompEnv(nLabels, scopeDepth, state, nLocals, nArgs, functions) {
-- Generates a new label
  fun genLabel() {
    [sprintf("L%d", nLabels), makeCompEnv(nLabels + 1, scopeDepth, state, nLocals, nArgs, functions)]
  }

  -- Adds a new function
  fun rememberFun(fLabel, args, body) {
    makeCompEnv(nLabels,
      scopeDepth,
      state,
      nLocals,
      nArgs,
      Fun(fLabel, args, body, state):functions)
  }

  -- Enters a local scope
  fun beginScope() {
    makeCompEnv(nLabels, scopeDepth + 1, enterScope(state), nLocals, nArgs, functions)
  }

  -- Leaves a local scope
  fun endScope() {
    makeCompEnv(nLabels, scopeDepth - 1, leaveScope(state), nLocals, nArgs, functions)
  }

  -- Adds an argument for the current function
  fun addArg(name) {
    makeCompEnv(nLabels, scopeDepth, addName(state, name, Arg(nArgs)), nLocals, nArgs + 1, functions)
  }

  -- Adds a local variable for the current function
  fun addVar(name) {
    if scopeDepth == 1
      then makeCompEnv(nLabels, scopeDepth, addName(state, name, Glb(name)), nLocals, nArgs, functions)
      else makeCompEnv(nLabels, scopeDepth, addName(state, name, Loc(nLocals)), nLocals + 1, nArgs, functions)
    fi
  }

  -- Adds a binding for a function
  fun addFun(name, fLabel, nargs) {
    makeCompEnv(nLabels, scopeDepth, addName(state, name, Fun(fLabel, nargs)), nLocals, nArgs, functions)
  }

  -- Enters a function
  fun beginFun(state) {
    makeCompEnv(nLabels, 1, enterFunction(state), 0, 0, functions)
  }

  -- Get functions and empty functions list
  fun getFuns() {
    [functions, makeCompEnv(nLabels, scopeDepth, state, nLocals, nArgs, { })]
  }

  -- Lookups a name of a variable
  fun lookupVar(name) {
    case lookup(state, name) of
        Fun (_, _) -> error(sprintf("the name ""%s"" does not designate a variable", name), getLoc(name))
      | x          -> x
    esac
  }

  -- Lookups a name of a function
  fun lookupFun(name) {
    case lookup(state, name) of
        x@Fun (_, _) -> x
      | _            -> error(sprintf("the name ""%s"" does not designate a function", name), getLoc(name))
    esac
  }

  -- Gets the number of local variables
  fun getLocals() {
    nLocals
  }

  -- Generates an intrinsic function name
  fun genFunLabel(name) {
    if scopeDepth == 1
      then [sprintf("L%s", name), makeCompEnv(nLabels, scopeDepth, state, nLocals, nArgs, functions)]
      else [sprintf("L%s_%d", name, nLabels), makeCompEnv(nLabels + 1, scopeDepth, state, nLocals, nArgs, functions)]
    fi
  }

  -- Checks if the current scope is a global
  fun isGlobal() {
    scopeDepth == 1
  }

  [genLabel,
    rememberFun,
    beginScope,
    endScope,
    addArg,
    addVar,
    beginFun,
    getFuns,
    lookupVar,
    lookupFun,
    getLocals,
    genFunLabel,
    addFun,
    isGlobal
  ]
}

-- Initialize a new compilation environment
fun initCompEnv() {
  makeCompEnv(0, 0, emptyState(), 0, 0, { })
}

-- Accessor functions
fun genLabel(env) {
  env [0]()
}

fun rememberFun(env, name, args, body) {
  env [1](name, args, body)
}

fun beginScope(env) {
  env [2]()
}

fun endScope(env) {
  env [3]()
}

fun addArg(env, name) {
  env [4](name)
}

fun addVar(env, name) {
  env [5](name)
}

fun beginFun(env, state) {
  env [6](state)
}

fun getFuns(env) {
  env [7]()
}

fun lookupVar(env, name) {
  env [8](name)
}

fun lookupFun(env, name) {
  env [9](name)
}

fun getLocals(env) {
  env [10]()
}

fun genFunLabel(env, name) {
  env [11](name)
}

fun addFun(env, name, fLabel, nargs) {
  env [12](name, fLabel, nargs)
}

fun isGlobal(env) {
  env [13]()
}

-- Helper function: generates n labels
fun genLabels(env, n) {
  fun inner(env, n) {
    if n == 0
      then { env }
      else case genLabel(env) of
        [lab, env] -> lab:inner(env, n - 1)
      esac
    fi
  }

  listArray(inner(env, n))
}

-- Helper function: adds a bunch of arguments
fun addArgs(env, names) {
  foldl(fun (env, name) { addArg(env, name) }, env, names)
}

-- Helper function: adds a bunch of locals
fun addVars(env, names) {
  foldl(fun (env, name) { addVar(env, name) }, env, names)
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.

(* Assignment *)

-- Some guidelines for compiling functions and scopes.
--
-- 1. use env.beginScope/env.endScope properly;
-- 2. in each scope traverse the definitions twice:
--    a. first, add all bindings into symbolic state,
--       using end.addVar/env.addFun;
--    b. do not forget to generate GLOBAL instructions for
--       top-level variable declarations;
--    c. on the secord traversal add functions themselves for
--       future code generation (use env.rememberFun).
-- 3. the overall flow for codegeneration:
--    a. generate the code for thetopmost expression (the progrman itself);
--    b. take list of nested functions definitions via env.getFuns and
--       generate the code for each function;
--    c. repeat b. until no function definitions appear.
-- 4. when compiling functions, do not forget to create proper
--    environment (use env.beginFun) and register arguments
--    (use env.addArg).

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
public fun compileSM(stmt) {
  fun label(lab, labUsed) {
    if labUsed
      then singletonBuffer(LABEL(lab))
      else emptyBuffer()
    fi
  }

  -- first traverse to see new functions, vars and links they with symbolic state
  -- return [env, functions, code]
  fun addDefsTraverse(env, defs) {
    foldl(fun ([env, funs, code], d) {
      case d of
          Fun(name, args, body) ->
            case genFunLabel(env, name) of
              [label, env] -> (
                [addFun(env, name, label, args.size), [label, args, body]:funs, code]
              )
            esac
        | Var(names)            ->
            case addVars(env, names) of
              env -> (
                -- Only the place where code can change
                if isGlobal(env) then
                  code := foldl(fun (code, name) {
                    code <+> singletonBuffer(GLOBAL(name))
                  }, code, names)
                fi;
                [env, funs, code]
              )
            esac
      esac
    }, [env, { }, emptyBuffer()], defs)
  }

  -- second traverse to link functions with symbolic environment to compile
  fun rememberEnvTravese(env, funs) {
    foldl(fun (env, [label, args, body]) {
      env.rememberFun(label, args, body)
    }, env, funs)
  }

  fun argsToSeq(args) {
    foldr(fun (action, arg) {
      Seq(arg, action)
    }, Skip, args)
  }

  fun compile(lab, env, stmt) {
    case stmt of
        Skip              -> [false, env, emptyBuffer()]
      | Read  (x)         -> [false, env, singletonBuffer(READ) <+ ST(lookupVar(env, x))]
      | Write (e)         ->
        case env.genLabel of
          [l, env] ->
            case compile(l, env, e) of
              [lUsed, env, code] ->
                [false, env, code <+ WRITE <+> label(l, lUsed)]
            esac
        esac
      | Assn  (x, e)      ->
        case env.genLabels(2) of
          [lx, le, env] ->
            case compile(lx, env, x) of
              [lxUsed, env, xCode] ->
                case compile(le, env, e) of
                  [leUsed, env, eCode] -> [false, env,
                    xCode <+>
                      label(lx, lxUsed) <+>
                      eCode <+>
                      label(le, leUsed) <+>
                      singletonBuffer(STI)
                  ]
                esac
            esac
        esac
      | Seq   (s1, s2)    ->
        case env.genLabel of
          [s2Lab, env] ->
            case compile(s2Lab, env, s1) of
              [s2LabUsed, env, s1Code] ->
                case compile(lab, env, s2) of
                  [labUsed, env, s2Code] -> [labUsed, env, s1Code <+> label(s2Lab, s2LabUsed) <+> s2Code]
                esac
            esac
        esac
      | While(e, s)       -> (
        case env.genLabels(3) of
          [l1, l2, l3, env1] ->
            case compile(l2, env1, s) of
              [_, env2, sCode] ->
                case compile(l3, env2, e) of
                  [l3Used, env3, eCode] -> [false, env3,
                    singletonBuffer(JMP(l2)) <+>
                      singletonBuffer(LABEL(l1)) <+>
                      sCode <+>
                      singletonBuffer(LABEL(l2)) <+>
                      eCode <+>
                      label(l3, l3Used) <+>
                      singletonBuffer(CJMP("nz", l1))
                  ]
                esac
            esac
        esac
      )
      | DoWhile(e, s)     -> (
        case env.genLabels(3) of
          [l1, l2, l3, env] -> case compile(l2, env, s) of
            [l2Used, env, sCode] ->
              case compile(l3, env, e) of
                [l3Used, env, eCode] -> [false, env,
                  singletonBuffer(LABEL(l1)) <+>
                    sCode <+>
                    label(l2, l2Used) <+>
                    eCode <+>
                    label(l3, l3Used) <+>
                    singletonBuffer(CJMP("nz", l1))
                ]
              esac
          esac
        esac
      )
      | If(e, s1, s2)     -> (
        case env.genLabels(2) of
          [l1, l2, env] ->
            case compile(lab, env, s2) of
              [flag2, env, s2Code] ->
                case compile(lab, env, s1) of
                  [flag1, env, s1Code] ->
                    case compile(l2, env, e) of
                      [l2Used, env, eCode] -> [true, env,
                        eCode <+>
                          label(l2, l2Used) <+>
                          singletonBuffer(CJMP("nz", l1)) <+>
                          s2Code <+>
                          singletonBuffer(JMP(lab)) <+>
                          singletonBuffer(LABEL(l1)) <+>
                          s1Code
                      ]
                    esac
                esac
            esac
        esac
      )
      | Ignore(e)         ->
        case env.genLabel of
          [l, env] ->
            case compile(l, env, e) of
              [lUsed, env, eCode] -> [false, env,
                eCode <+>
                  label(l, lUsed) <+>
                  singletonBuffer(DROP)
              ]
            esac
        esac
      | Var(x)            -> [false, env, singletonBuffer(LD(lookupVar(env, x)))]
      | Ref    (x)        -> [false, env, singletonBuffer(LDA(lookupVar(env, x)))]
      | Const  (n)        -> [false, env, singletonBuffer(CONST(n))]
      | Binop(op, e1, e2) ->
        case env.genLabels(2) of
          [l1, l2, env] ->
            case compile(l1, env, e1) of
              [l1Used, env, e1Code] ->
                case compile(l2, env, e2) of
                  [l2Used, env, e2Code] -> [false, env,
                    e1Code <+>
                      label(l1, l1Used) <+>
                      e2Code <+>
                      label(l2, l2Used) <+>
                      singletonBuffer(BINOP(op))]
                esac
            esac
        esac
      | Scope(defs, e)    -> (
        env := beginScope(env);
        case addDefsTraverse(env, defs) of
          [env, funs, initCode] -> (
            case rememberEnvTravese(env, funs) of
              env -> (
                -- here we can compile body
                case compile(lab, env, e) of
                  [labUsed, newEnv, eCode] ->
                    [labUsed, endScope(newEnv), initCode <+> eCode]
                esac
              )
            esac
          )
        esac
      )
      | Call(f, l)        -> (
        case lookupFun(env, f) of
          Fun(flabel, args_count) -> (
            case genLabel(env) of
              [lab, env] ->
                case compile(lab, env, argsToSeq(l)) of
                  [labUsed, env, code] ->
                    [false, env,
                      code <+>
                        label(lab, labUsed) <+>
                        singletonBuffer(CALL(flabel, args_count))
                    ]
                esac
            esac
          )
        esac
      )
    esac
  }

  fun compileFunctions(env, main) {
    fun iterate(env, funList) {
      case funList of
          { }                            ->
            case getFuns(env) of
                [{ }, env] -> emptyBuffer()
              | [fs, env]  -> iterate(env, fs)
            esac
        | Fun(f, args, body, state) : fs -> (
          case genLabel(addArgs(beginFun(env, state), args)) of
            [lab, env] -> (
              case compile(lab, env, body) of
                [labUsed, env, code] ->
                  singletonBuffer(LABEL(f)) <+>
                    singletonBuffer(BEGIN(f, size(args), getLocals(env))) <+>
                    code <+>
                    label(lab, labUsed) <+>
                    singletonBuffer(END) <+>
                    iterate(env, fs)
              esac
            )
          esac
        )
      esac
    }

    main <+> iterate(env, { })
  }

  case initCompEnv().genLabel of
    [endLab, env] ->
      case compile(endLab, env, stmt) of
        [endLabUsed, env, code] ->
          getBuffer $
            compileFunctions(env,
              singletonBuffer(LABEL("main")) <+>
                singletonBuffer(BEGIN("main", 0, getLocals(env))) <+>
                code <+>
                label(endLab, endLabUsed) <+>
                singletonBuffer(END))
      esac
  esac
}
