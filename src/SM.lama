-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

fun pop(st@(x:xs)) {
  [x, xs]
}

fun oneStepSM(c@[stack, state, w], i) {
  case i of 
    READ -> (
      var rw  = readWorld(w);
      [rw.fst : stack, state, rw.snd] 
    )
  | WRITE -> (
      var ps  = pop(stack);
      [ps.snd, state, writeWorld(ps.fst, w)]
    ) 
  | BINOP (s) -> (
      var ps  = pop(stack);
      var pps = pop(ps.snd);
      [evalOp(pps.fst, ps.fst, s) : pps.snd, state, w]
    )
  | LD (x) -> (
      [state(x) : stack, state, w]
    )
  | ST (x) -> (
      var ps = pop(stack);
      [ps.snd, state <- [x, ps.fst], w]
    )
  | CONST (n) -> (
      [n : stack, state, w]
    )
  esac
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c, insns) {
  case insns of 
    {} -> c
  | (i0 : rest) ->
     eval(oneStepSM(c, i0), rest) 
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
  case expr of
    Const (value)        -> {CONST (value)}
  | Var   (name)         -> {LD (name)}
  | Binop (type, e1, e2) -> compileExpr(e1) +++ compileExpr(e2) +++ {BINOP (type)}
  esac
}
-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  case stmt of
    Assn (vr, e) -> compileExpr(e) +++ {ST (vr)}
  | Skip -> {}
  | Seq (s1, s2) -> compileSM(s1) +++ compileSM(s2) 
  | Read (s) -> {READ, ST (s)}
  | Write (e) -> compileExpr(e) +++ {WRITE} 
  esac
}