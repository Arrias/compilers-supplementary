-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;
import Ref;
import Collection;

-- Signals an error; takes an error message and location info
fun error(msg, loc) {
  failure("%s at %d:%d\n", msg, loc.fst, loc.snd)
}

-- An attribute-processing functions
-- Attributes are:
--   Val  --- a plain value (aka "rvalue")
--   Ref  --- a reference to a mutable cell (aka "lvalue")
--   Void --- no value (aka "void"/"unit")

-- Checks if a plain value "val" can be used in the context described by
-- the attribute "atr".
fun assertValue(atr, v, loc) {
  case atr of
      Ref  -> error("reference expected", loc)
    | Void -> Ignore(v)
    | _    -> v
  esac
}

fun assertVoid(atr, v, loc) {
  case atr of
      Void -> v
    | Val  -> error("value expected", loc)
    | _    -> error("reference expected", loc)
  esac
}

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr(l, p, r) {
  syntax (-l p -r)
}

fun binop(op) {
  [syntax (pos -s[op]), fun (l, loc, r) {
    fun (a) {
      assertValue(a, Binop(op, l(Val), r(Val)), loc)
    }
  }
  ]
}

var elifLanguage = memo $ eta syntax (
  loc=pos kElif e=exp kThen tru=exp el=elifLanguage { fun (a) {
    If(e(Val), tru(a), el(a))
  } }               |
  kElse s=exp { s } |
  loc=pos whiteSpace { fun (a) {
    assertVoid(a, Skip, loc)
  } }
);

var ifLanguage = memo $ eta syntax(
  loc=pos kIf x=exp kThen s1=exp r=elifLanguage kFi { fun (a) {
      If(x(Val), s1(a), r(a))
  } }
);

var primary = memo $ eta syntax (
  -- decimal constant
  loc=pos x=decimal { fun (a) { assertValue(a, Const(stringInt(x)), loc) } } |

  -- identifier
  x=lident { fun (a) {
    case a of
        Ref  -> Ref(x)
      | Void -> Ignore(Var(x))
      | _    -> Var(x)
    esac
  } }                                                                        |

  --read
  loc=pos kRead s["("] x=lident s[")"] { fun (a) {
    assertVoid(a, Read(x), loc)
  } }                                                                        |

  -- write
  loc=pos kWrite s["("] e=exp s[")"] { fun (a) {
    assertVoid(a, Write(e(Val)), loc)
  } }                                                                        |

  -- if
  loc=pos i=ifLanguage { i }                                                 |

  -- while
  loc=pos kWhile e=exp kDo s=exp kOd { fun (a) {
    assertVoid(a, While(e(Val), s(Void)), loc)
  } }                                                                        |

  -- do while
  loc=pos kDo s=exp kWhile e=exp kOd { fun (a) {
    assertVoid(a, DoWhile(e(Val), s(Void)), loc)
  } }                                                                        |

  -- brackets
  loc=pos x=inbr[s("("), exp, s(")")] { x }                                  |

  -- skip
  loc=pos kSkip { fun (a) {
    assertVoid(a, Skip, loc)
  } }                                                                        |

  -- for
  loc=pos kFor s1=exp s[","] e=exp s[","] s2=exp kDo s3=exp kOd {
    fun (a) {
      assertVoid(a, Seq(s1(Void), While(e(Val), Seq(s3(Void), s2(Void)))), loc)
    }
  }
);

var basic = memo $ eta (expr({
  [Right, { [s(":="), fun (l, loc, r) { fun (a) { assertValue(a, Assn(l(Ref), r(Val)), loc) } }] }],
  [Left, map(binop, { "!!" })],
  [Left, map(binop, { "&&" })],
  [Nona, map(binop, { "==", "!=", "<", ">", "<=", ">=" })],
  [Left, map(binop, { "+", "-" })],
  [Left, map(binop, { "*", "/", "%" })]
},
  primary));


var exp = memo $ eta syntax (
  basic |
  s1=basic s[";"] s2=exp { fun (a) {
    Seq(s1(Void), s2(a)) }
  }
);

-- Public top-level parser
public parse = syntax (s=exp { s(Void) });
